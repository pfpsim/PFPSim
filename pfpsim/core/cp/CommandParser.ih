// Generated by Bisonc++ V4.09.02 on Sun, 03 Apr 2016 08:35:18 -0400

    // Include this file in the sources of the class CommandParser.

// $insert class.h
#include "CommandParser.h"

#include "Commands.h"

#include <vector>
#include <string>
#include <algorithm>
#include <iterator>
#include <sstream>
#include <memory>

#include "NAMESPACE_HACK_BEGIN"
// $insert namespace-open
namespace pfp_cp
{

CommandParser::CommandParser()
{
  // See https://fbb-git.github.io/bisoncpp/manual/bisonc++06.html#DVAL
  d_scanner.setSval(&d_val__);
}

inline void CommandParser::error(char const *msg)
{
    std::cerr << msg << '\n';
}

// $insert lex
inline int CommandParser::lex()
{
    return d_scanner.lex();
}

void CommandParser::returnCommand(Command * cmd){
  returned_command.reset(cmd);
}

std::shared_ptr<Command> CommandParser::parse_line(std::string & s) {
  std::stringstream is(s);

  d_scanner.switchStreams(is);

  returned_command.reset((Command*)nullptr);
  this->parse();

  return returned_command;
}

inline void CommandParser::print()
{
    print__();           // displays tokens if --print was specified
}

inline void CommandParser::exceptionHandler__(std::exception const &exc)
{
    throw;              // re-implement to handle exceptions thrown by actions
}

// $insert namespace-close
}
#include "NAMESPACE_HACK_END"

    // Add here includes that are only required for the compilation
    // of CommandParser's sources.


// $insert namespace-use
    // UN-comment the next using-declaration if you want to use
    // symbols from the namespace pfp_cp without specifying pfp_cp::
//using namespace pfp_cp;

    // UN-comment the next using-declaration if you want to use
    // int CommandParser's sources symbols from the namespace std without
    // specifying std::

//using namespace std;
