/*
 * PFPSim: Library for the Programmable Forwarding Plane Simulation Framework
 *
 * Copyright (C) 2016 Concordia Univ., Montreal
 *     Samar Abdi
 *     Umair Aftab
 *     Gordon Bailey
 *     Faras Dewal
 *     Shafigh Parsazad
 *     Eric Tremblay
 *
 * Copyright (C) 2016 Ericsson
 *     Bochra Boughzala
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */

// Generated by Bisonc++ V4.09.02 on Sun, 03 Apr 2016 08:35:18 -0400

#ifndef CORE_CP_COMMANDPARSER_H_
#define CORE_CP_COMMANDPARSER_H_
#include <string>
#include "Commands.h"

#ifndef pfp_cpCommandParserBase_h_included
#include "NAMESPACE_HACK_BEGIN"
// $insert baseclass
#include "CommandParserbase.h"
#include "NAMESPACE_HACK_END"
#endif

// $insert scanner.h
#include "CommandScanner.h"

#include "NAMESPACE_HACK_BEGIN"  // NOLINT(build/include)
// $insert namespace-open
namespace pfp_cp {

#undef CommandParser
class CommandParser: public CommandParserBase {
  // $insert scannerobject
  CommandScanner d_scanner;

 public:
  CommandParser();

  std::shared_ptr<Command> parse_line(std::string & s);

 private:
  void returnCommand(Command *cmd);
  std::shared_ptr<Command> returned_command;

  int parse();
  void error(char const *msg);    // called on (syntax) errors
  int lex();                      // returns the next token from the
                                  // lexical scanner.
  void print();                   // use, e.g., d_token, d_loc

// support functions for parse():
  void executeAction(int ruleNr);
  void errorRecovery();
  int lookup(bool recovery);
  void nextToken();
  void print__();
  void exceptionHandler__(std::exception const &exc);
};

// $insert namespace-close
};  // namespace pfp_cp
#include "NAMESPACE_HACK_END"  // NOLINT(build/include)

#endif  // CORE_CP_COMMANDPARSER_H_
